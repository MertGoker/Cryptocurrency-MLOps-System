version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "8501:8501"
    environment:
      - BACKEND_URL=http://backend:8000
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - crypto-mlops-network
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LANGSMITH_API_KEY=${LANGSMITH_API_KEY}
      - LANGSMITH_PROJECT=${LANGSMITH_PROJECT:-crypto-mlops}
      - NEWS_API_KEY=${NEWS_API_KEY}
    volumes:
      - ./backend:/app
      - ./ml_models:/app/ml_models
      - ./data:/app/data
    networks:
      - crypto-mlops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  jenkins:
    image: jenkins/jenkins:lts-jdk17
    container_name: crypto-mlops-jenkins
    ports:
      - "8080:8080"
      - "50000:50000"
    environment:
      - JENKINS_OPTS=--httpPort=8080
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
      - ./jenkins:/var/jenkins_home/jobs
    networks:
      - crypto-mlops-network
    restart: unless-stopped
    user: root

  redis:
    image: redis:7-alpine
    container_name: crypto-mlops-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - crypto-mlops-network
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    container_name: crypto-mlops-postgres
    environment:
      - POSTGRES_DB=crypto_mlops
      - POSTGRES_USER=mlops_user
      - POSTGRES_PASSWORD=mlops_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - crypto-mlops-network
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: crypto-mlops-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - crypto-mlops-network
    restart: unless-stopped

volumes:
  jenkins_home:
  redis_data:
  postgres_data:

networks:
  crypto-mlops-network:
    driver: bridge 